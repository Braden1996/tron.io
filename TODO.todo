Tron Game:
  Client Functionality:
   ✔ Research and then create the game loop. @done (17-02-03 23:37)
     Article - <https://www.sitepoint.com/quick-tip-game-loop-in-javascript/>
   ✔ Create basic game state, including the player's position and direction. @done (17-02-04 00:12)
   ✔ Register user's keyboard input. @done (17-02-04 23:30)
   ✔ Draw grid on canvas. @done (17-02-05 00:33)
   ✔ Indicate the position of all players within the canvas. @done (17-02-05 00:33)
   ✔ Move all players along their chosen direction continuously at some standard speed. @done (17-02-09 16:06)
   ✔ Store and add trail along the path in which a player has travelled. @done (17-02-09 19:12)
   ✔ Resize canvas to scale appropriately in relation to the screen. @done (17-02-10 13:07)
   ✔ Allow player to be positioned between at a per-pixel basis, as opposed to occupying grid cells. @done (17-02-09 19:12)
     Many issues arise when using a pixel-based grid system. For example, it would increase the complexity involved in getting the game to work across different sized browsers.

     To combat this, I chose to stick with a grid based system that is used to normalise the arena size. A player, and their trail, are both equal in width to a single grid cell. I have also added a restriction which makes a player unable to change direction unless they have travelled by at least one grid-cell in their chosen direction. This is to prevent player's from unintentionally overlapping themselves when changing direction very quickly.
   ✔ Fix arena size normalisation so window can be resized freely. @done (17-02-10 13:54)
   ✔ Add collision detection for when a player hits the arena borders. @done (17-02-10 14:54)
   ✔ Add collision detection for when a player hits a trail. @started @done (17-02-12 21:53)
     Need to fix issue where the player is positioned incorrectly in relation to the line they've hit.
   ✔ Add basic menu functionality before the game has begun. @done (17-02-16 21:49)
   ✔ Extend the menu so that the user is able to change basic game configurations (e.g. number of players, speed). @done (17-02-19 17:29)
   ✔ Improve collision detection by taking into account the entire travelled distance. @done (17-02-22 12:43)
   ✔ Fix head-on collision bug. The issue 'seems' to be that the overlap gained during one tick is greater than the single line segment of the previous tick. @done (17-02-22 16:23)
   ✔ Prepare for network functionality by adding a basic game lobby into the menu. @done (17-03-05 22:39)
   ✔ Cleaner way to initially position players. @started @done (17-03-02 20:19)
   ✔ Divide arena space up into some data-structure (such as a uniform grid or quad-tree) to improve collision detection efficiency. @started @done (17-03-03 16:27)
     Quad tree research - https://gamedevelopment.tutsplus.com/tutorials/quick-tip-use-quadtrees-to-detect-likely-collisions-in-2d-space--gamedev-374
     Note - currently, the tree is recreated every tick. This isn't strickly necessary as existing trails wont ever move. Although, it would be difficult to change.
   ☐ Fix conceptual bug where only the first collision point is found, as opposed to the closest/first-hit.
   ☐ Make improvements to quadtree such that it is only rebalanced on updates, as opposed to being recreated.
   ☐ Read game state snapshots, which are sent from the server, into the client's understanding of the game.

  Server Functionality:
   ✔ Research and prepare a basic server technology. @done (17-02-28 11:21)
   ✔ Player can setup a lobby, existing on the server, that other players are then able to join. @done (17-03-05 22:39)
   ✔ Game server (Node JS) compatible game-loop. Timer technique inspired by: @done (17-03-09 13:41)
   http://timetocode.tumblr.com/post/71512510386/an-accurate-nodejs-game-loop-inbetween-settimeout
   ✔ Game state snapshots are sent to all clients of a lobby at some rate. @done (17-03-09 13:41)
   ☐ The host of the lobby is able to add computer players into the game.

 Shared Functionality:
  ✔ Decouple our game files from the rest of the project. This will make it far easier for our game to be portable; so we can execute on either the client or server. This will entail removing Immutable.js from our core game files and perhaps creating some kind of interface instead. @done (17-03-07 19:32)

  Misc:
   ☐ Add readme to project repository, with instructions on how to set everything up.
   ☐ Improve npm tasks so that static folder structure is created.
   ☐ Add an npm task to lint our JavaScript.

 Research:
  ✔ Realtime HTML5 Multiplayer Games with NodeJS: https://www.youtube.com/watch?v=z1_QpUkX2Gg @done (17-02-25 22:50)
